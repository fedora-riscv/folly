From 2683bef188f8b6952b30c4eb59cadd7d0c0c2dbb Mon Sep 17 00:00:00 2001
From: Michel Salim <michel@fb.com>
Date: Mon, 22 Mar 2021 13:29:59 -0700
Subject: [PATCH] handle non-constant SIGSTKSZ

Summary:
On glibc > 2.33 (e.g. on Fedora rawhide/35), `SIGSTKSZ` is no longer constant:
http://sourceware-org.1504.n7.nabble.com/PATCH-sysconf-Add-SC-MINSIGSTKSZ-SC-SIGSTKSZ-BZ-20305-td650948.html

Assume it's non-constant, and so:
- use `std::max` rather than `folly::constexpr_max` to compute the stack size
- cast both arguments to `size_t` since in the non-constant case we get a `long int` back
- use `std::vector` rather than `std::array` and resize it to the computed size

Differential Revision: D27143320
---

diff --git a/folly/fibers/FiberManager.cpp b/folly/fibers/FiberManager.cpp
--- a/folly/fibers/FiberManager.cpp
+++ b/folly/fibers/FiberManager.cpp
@@ -341,10 +341,6 @@
 
 namespace {
 
-// SIGSTKSZ (8 kB on our architectures) isn't always enough for
-// folly::symbolizer, so allocate 32 kB.
-constexpr size_t kAltStackSize = folly::constexpr_max(SIGSTKSZ, 32 * 1024);
-
 bool hasAlternateStack() {
   stack_t ss;
   sigaltstack(nullptr, &ss);
@@ -372,9 +368,13 @@
       return;
     }
 
-    stack_ = std::make_unique<AltStackBuffer>();
+    // SIGSTKSZ (8 kB on our architectures) isn't always enough for
+    // folly::symbolizer, so allocate 32 kB.
+    size_t kAltStackSize = std::max((size_t)SIGSTKSZ, (size_t)(32 * 1024));
+
+    stack_ = std::make_unique<char[]>(kAltStackSize);
 
-    setAlternateStack(stack_->data(), stack_->size());
+    setAlternateStack(stack_.get(), kAltStackSize);
   }
 
   ScopedAlternateSignalStack(ScopedAlternateSignalStack&&) = default;
@@ -387,8 +387,7 @@
   }
 
  private:
-  using AltStackBuffer = std::array<char, kAltStackSize>;
-  std::unique_ptr<AltStackBuffer> stack_;
+  std::unique_ptr<char[]> stack_;
 };
 } // namespace
 
--
1.7.9.5
