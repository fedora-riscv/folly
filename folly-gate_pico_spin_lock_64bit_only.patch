diff '--color=auto' -ruN folly-2022.03.07.00/folly/synchronization/PicoSpinLock.h folly-2022.03.07.00-gate_pico_spin_lock_64bit_only/folly/synchronization/PicoSpinLock.h
--- folly-2022.03.07.00/folly/synchronization/PicoSpinLock.h	2022-03-05 22:02:58.000000000 -0800
+++ folly-2022.03.07.00-gate_pico_spin_lock_64bit_only/folly/synchronization/PicoSpinLock.h	2022-03-07 14:09:34.628747021 -0800
@@ -31,6 +31,16 @@
  */
 
 #pragma once
+#if !FOLLY_X64 && !FOLLY_PPC64 && !FOLLY_AARCH64
+/*
+ * make_atomic_ref requires sizeof and alignof to match, but
+ * on x86:
+ * alignof(unsigned long long): 4
+ * alignof(std::atomic<unsigned long long>): 8
+ */
+#error "PicoSpinLock is x64, ppc64 or aarch64 specific code."
+#endif
+#define FOLLY_PICO_SPIN_LOCK_H_
 
 /*
  * @author Keith Adams <kma@fb.com>
diff '--color=auto' -ruN folly-2022.03.07.00/folly/synchronization/SmallLocks.h folly-2022.03.07.00-gate_pico_spin_lock_64bit_only/folly/synchronization/SmallLocks.h
--- folly-2022.03.07.00/folly/synchronization/SmallLocks.h	2022-03-05 22:02:58.000000000 -0800
+++ folly-2022.03.07.00-gate_pico_spin_lock_64bit_only/folly/synchronization/SmallLocks.h	2022-03-07 14:04:05.648102652 -0800
@@ -36,4 +36,6 @@
 #include <folly/MicroLock.h>
 #include <folly/Portability.h>
 #include <folly/synchronization/MicroSpinLock.h>
+#if FOLLY_X64 || FOLLY_AARCH64 || FOLLY_PPC64
 #include <folly/synchronization/PicoSpinLock.h>
+#endif
diff '--color=auto' -ruN folly-2022.03.07.00/folly/synchronization/test/SmallLocksTest.cpp folly-2022.03.07.00-gate_pico_spin_lock_64bit_only/folly/synchronization/test/SmallLocksTest.cpp
--- folly-2022.03.07.00/folly/synchronization/test/SmallLocksTest.cpp	2022-03-05 22:02:58.000000000 -0800
+++ folly-2022.03.07.00-gate_pico_spin_lock_64bit_only/folly/synchronization/test/SmallLocksTest.cpp	2022-03-07 14:15:06.452286338 -0800
@@ -40,7 +40,9 @@
 using folly::MicroLock;
 using folly::MicroSpinLock;
 using folly::MSLGuard;
+#ifdef FOLLY_PICO_SPIN_LOCK_H_
 using folly::PicoSpinLock;
+#endif
 
 DEFINE_int64(
     stress_test_seconds, 2, "Number of seconds for which to run stress tests");
@@ -66,11 +68,13 @@
 } FOLLY_PACK_ATTR;
 static_assert(sizeof(ignore1) == 3, "Size check failed");
 static_assert(sizeof(MicroSpinLock) == 1, "Size check failed");
+#ifdef FOLLY_PICO_SPIN_LOCK_H_
 struct ignore2 {
   PicoSpinLock<uint32_t> psl;
   int16_t foo;
 } FOLLY_PACK_ATTR;
 static_assert(sizeof(ignore2) == 6, "Size check failed");
+#endif
 FOLLY_PACK_POP
 
 LockedVal v;
@@ -88,6 +92,7 @@
   }
 }
 
+#ifdef FOLLY_PICO_SPIN_LOCK_H_
 template <class T>
 struct PslTest {
   PicoSpinLock<T> lock;
@@ -121,6 +126,7 @@
     t.join();
   }
 }
+#endif
 
 struct TestClobber {
   TestClobber() { lock_.init(); }
@@ -151,6 +157,7 @@
   }
 }
 
+#ifdef FOLLY_PICO_SPIN_LOCK_H_
 TEST(SmallLocks, PicoSpinCorrectness) {
   doPslTest<int16_t>();
   doPslTest<uint16_t>();
@@ -202,6 +209,7 @@
     }
   }
 }
+#endif
 
 TEST(SmallLocks, RegClobber) {
   TestClobber().go();
@@ -394,6 +402,7 @@
   simpleStressTest<MicroSpinLock>(duration, threads);
 }
 
+#ifdef FOLLY_PICO_SPIN_LOCK_H_
 TEST(SmallLocks, PicoSpinLockStressTestLockTwoThreads) {
   auto duration = std::chrono::seconds{FLAGS_stress_test_seconds};
   simpleStressTest<PicoSpinLock<std::uint16_t>>(duration, 2);
@@ -404,6 +413,7 @@
   auto threads = std::thread::hardware_concurrency();
   simpleStressTest<PicoSpinLock<std::uint16_t>>(duration, threads);
 }
+#endif
 
 namespace {
 template <typename Mutex>
@@ -494,6 +504,7 @@
   }
 }
 
+#ifdef FOLLY_PICO_SPIN_LOCK_H_
 TEST(SmallLocks, PicoSpinLockStressTestTryLockTwoThreads) {
   auto duration = std::chrono::seconds{FLAGS_stress_test_seconds};
   simpleStressTestTryLock<PicoSpinLock<std::uint16_t>>(duration, 2);
@@ -504,3 +515,4 @@
   auto threads = std::thread::hardware_concurrency();
   simpleStressTestTryLock<PicoSpinLock<std::uint16_t>>(duration, threads);
 }
+#endif
